{"version":3,"sources":["components/form/form.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Form","useForm","register","handleSubmit","errors","onSubmit","firstName","lastName","age","email","console","log","window","alert","htmlFor","name","ref","required","maxLength","value","message","pattern","placeholder","type","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"uPAYaA,G,OAAO,WAAO,IAAD,EACmBC,cAAnCC,EADgB,EAChBA,SAAUC,EADM,EACNA,aAAcC,EADR,EACQA,OAE1BC,EAAWF,GAAa,YAA0C,IAAvCG,EAAsC,EAAtCA,UAAWC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,IAAKC,EAAY,EAAZA,MACzDC,QAAQC,IAAIL,EAAWC,EAAUC,GACjCI,OAAOC,MAAP,qBAA2BP,EAA3B,uBAAmDC,EAAnD,kBAAqEC,EAArE,oBAAoFC,EAApF,SAGF,OACE,0BAAMJ,SAAUA,GAEd,6BACE,2BAAOS,QAAQ,aAAf,cACA,2BAAOC,KAAK,YAAYC,IAAKd,EAAS,MAFxC,KAKA,6BACE,2BAAOY,QAAQ,YAAf,aACA,2BACEC,KAAK,WACLC,IAAKd,EAAS,CACZe,SAAU,yBACVC,UAAW,CACTC,MAAO,GACPC,QAAS,wBAIdhB,EAAOG,UAAY,2BAAIH,EAAOG,SAASa,UAG1C,6BACE,2BAAON,QAAQ,OAAf,OACA,2BAAOC,KAAK,MAAMC,IAAKd,EAAS,CAAEmB,QAAS,UAC1CjB,EAAOI,KAAO,4DAGjB,6BACE,2BAAOM,QAAQ,SAAf,SACA,2BACEC,KAAK,QACLC,IAAKd,EAAS,CACZmB,QAAS,CACPF,MAAO,0JACPC,QAAS,0BAGbE,YAAY,8BAEblB,EAAOK,OAAS,2BAAIL,EAAOK,MAAMW,UAGpC,2BAAOG,KAAK,cCpDHC,MATf,WACE,OACE,6BACE,uDACA,kBAAC,EAAD,QCKcC,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMrB,a","file":"static/js/main.f30525b8.chunk.js","sourcesContent":["import React from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nimport \"./form.css\";\n\ntype FormData = {\n  firstName: string;\n  lastName: string;\n  age: number;\n  email: string;\n}\n\nexport const Form = () => {\n  const { register, handleSubmit, errors } = useForm<FormData>();\n\n  const onSubmit = handleSubmit(({ firstName, lastName, age, email }) => {\n    console.log(firstName, lastName, age);\n    window.alert(`firstName: ${firstName}, lastName: ${lastName}, age: ${age}, email: ${email} `);\n  });\n\n  return (\n    <form onSubmit={onSubmit}>\n\n      <div>\n        <label htmlFor=\"firstName\">First Name</label>\n        <input name=\"firstName\" ref={register({})} /> {/* register an input */}\n      </div>\n\n      <div>\n        <label htmlFor=\"lastName\">Last Name</label>\n        <input\n          name=\"lastName\"\n          ref={register({\n            required: \"Last name is required.\",\n            maxLength: {\n              value: 15,\n              message: \"Max length is 15\"\n            }\n          })}\n        />\n        {errors.lastName && <p>{errors.lastName.message}</p>}\n      </div>\n\n      <div>\n        <label htmlFor=\"age\">Age</label>\n        <input name=\"age\" ref={register({ pattern: /\\d+/ })} />\n        {errors.age && <p>Please enter number for age.</p>}\n      </div>\n\n      <div>\n        <label htmlFor=\"email\">Email</label>\n        <input\n          name=\"email\"\n          ref={register({\n            pattern: {\n              value: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n              message: \"Invalid email addres\"\n            }\n          })}\n          placeholder=\"mailAddress1@somemail.com\"\n        />\n        {errors.email && <p>{errors.email.message}</p>}\n      </div>\n\n      <input type=\"submit\" />\n    </form>\n  );\n};\n","import React from \"react\";\nimport { Form } from './form/form';\n\nfunction App() {\n  return (\n    <div>\n      <h3>react-hook-form example</h3>\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"react-app-polyfill/ie11\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}